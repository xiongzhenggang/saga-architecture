-- CREATE SCHEMA IF NOT EXISTS eventuate AUTHORIZATION SA;
--
-- CREATE TABLE IF NOT EXISTS eventuate.aggregate_instance_subscriptions(
--   aggregate_type VARCHAR(200) DEFAULT NULL,
--   aggregate_id VARCHAR(1000) NOT NULL,
--   event_type VARCHAR(200) NOT NULL,
--   saga_id VARCHAR(1000) NOT NULL,
--   saga_type VARCHAR(200) NOT NULL,
--   PRIMARY KEY(aggregate_id, event_type, saga_id, saga_type)
-- );
--
-- CREATE TABLE IF NOT EXISTS eventuate.saga_instance(
--   saga_type VARCHAR(100) NOT NULL,
--   saga_id VARCHAR(100) NOT NULL,
--   state_name VARCHAR(100) NOT NULL,
--   last_request_id VARCHAR(100),
--   end_state TINYINT,
--   compensating TINYINT,
--   failed TINYINT,
--   saga_data_type VARCHAR(1000) NOT NULL,
--   saga_data_json VARCHAR(1000) NOT NULL,
--   PRIMARY KEY(saga_type, saga_id)
-- );
--
--
-- CREATE TABLE IF NOT EXISTS eventuate.saga_instance_participants (
--   saga_type VARCHAR(100) NOT NULL,
--   saga_id VARCHAR(100) NOT NULL,
--   destination VARCHAR(100) NOT NULL,
--   resource VARCHAR(100) NOT NULL,
--   PRIMARY KEY(saga_type, saga_id, destination, resource)
-- );
--
--
-- create table IF NOT EXISTS eventuate.saga_lock_table(
--   target VARCHAR(100) PRIMARY KEY,
--   saga_type VARCHAR(100) NOT NULL,
--   saga_Id VARCHAR(100) NOT NULL
-- );
--
-- create table IF NOT EXISTS eventuate.saga_stash_table(
--   message_id VARCHAR(100) PRIMARY KEY,
--   target VARCHAR(100) NOT NULL,
--   saga_type VARCHAR(100) NOT NULL,
--   saga_id VARCHAR(100) NOT NULL,
--   message_headers VARCHAR(1000) NOT NULL,
--   message_payload VARCHAR(1000) NOT NULL
--   );
--
